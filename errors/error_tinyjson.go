// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package errors

import (
	json "encoding/json"
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
	location "github.com/apexlang/apex-go/location"
	source "github.com/apexlang/apex-go/source"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonC34e4ef0DecodeGithubComApexlangApexGoErrors(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "stack":
			out.Stack = string(in.String())
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(source.Source)
				}
				tinyjsonC34e4ef0DecodeGithubComApexlangApexGoSource(in, out.Source)
			}
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]uint, 0, 8)
					} else {
						out.Positions = []uint{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint
					v1 = uint(in.Uint())
					out.Positions = append(out.Positions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "locations":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if out.Locations == nil {
					if !in.IsDelim(']') {
						out.Locations = make([]location.SourceLocation, 0, 4)
					} else {
						out.Locations = []location.SourceLocation{}
					}
				} else {
					out.Locations = (out.Locations)[:0]
				}
				for !in.IsDelim(']') {
					var v2 location.SourceLocation
					tinyjsonC34e4ef0DecodeGithubComApexlangApexGoLocation(in, &v2)
					out.Locations = append(out.Locations, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make([]interface{}, 0, 4)
					} else {
						out.Path = []interface{}{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v3 interface{}
					if m, ok := v3.(tinyjson.Unmarshaler); ok {
						m.UnmarshalTinyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					out.Path = append(out.Path, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonC34e4ef0EncodeGithubComApexlangApexGoErrors(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	if in.Stack != "" {
		const prefix string = ",\"stack\":"
		out.RawString(prefix)
		out.String(string(in.Stack))
	}
	if in.Source != nil {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		tinyjsonC34e4ef0EncodeGithubComApexlangApexGoSource(out, *in.Source)
	}
	if len(in.Positions) != 0 {
		const prefix string = ",\"positions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v4, v5 := range in.Positions {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v5))
			}
			out.RawByte(']')
		}
	}
	if len(in.Locations) != 0 {
		const prefix string = ",\"locations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Locations {
				if v6 > 0 {
					out.RawByte(',')
				}
				tinyjsonC34e4ef0EncodeGithubComApexlangApexGoLocation(out, v7)
			}
			out.RawByte(']')
		}
	}
	if len(in.Path) != 0 {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Path {
				if v8 > 0 {
					out.RawByte(',')
				}
				if m, ok := v9.(tinyjson.Marshaler); ok {
					m.MarshalTinyJSON(out)
				} else if m, ok := v9.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonC34e4ef0EncodeGithubComApexlangApexGoErrors(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Error) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonC34e4ef0EncodeGithubComApexlangApexGoErrors(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonC34e4ef0DecodeGithubComApexlangApexGoErrors(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Error) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonC34e4ef0DecodeGithubComApexlangApexGoErrors(l, v)
}
func tinyjsonC34e4ef0DecodeGithubComApexlangApexGoLocation(in *jlexer.Lexer, out *location.SourceLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "line":
			out.Line = uint(in.Uint())
		case "column":
			out.Column = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonC34e4ef0EncodeGithubComApexlangApexGoLocation(out *jwriter.Writer, in location.SourceLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Line))
	}
	{
		const prefix string = ",\"column\":"
		out.RawString(prefix)
		out.Uint(uint(in.Column))
	}
	out.RawByte('}')
}
func tinyjsonC34e4ef0DecodeGithubComApexlangApexGoSource(in *jlexer.Lexer, out *source.Source) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonC34e4ef0EncodeGithubComApexlangApexGoSource(out *jwriter.Writer, in source.Source) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Body)
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
