// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel(in *jlexer.Lexer, out *Value) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bool":
			if in.IsNull() {
				in.Skip()
				out.Bool = nil
			} else {
				if out.Bool == nil {
					out.Bool = new(bool)
				}
				*out.Bool = bool(in.Bool())
			}
		case "string":
			if in.IsNull() {
				in.Skip()
				out.String = nil
			} else {
				if out.String == nil {
					out.String = new(string)
				}
				*out.String = string(in.String())
			}
		case "i64":
			if in.IsNull() {
				in.Skip()
				out.I64 = nil
			} else {
				if out.I64 == nil {
					out.I64 = new(int64)
				}
				*out.I64 = int64(in.Int64())
			}
		case "f64":
			if in.IsNull() {
				in.Skip()
				out.F64 = nil
			} else {
				if out.F64 == nil {
					out.F64 = new(float64)
				}
				*out.F64 = float64(in.Float64())
			}
		case "Reference":
			if in.IsNull() {
				in.Skip()
				out.Reference = nil
			} else {
				if out.Reference == nil {
					out.Reference = new(Reference)
				}
				(*out.Reference).UnmarshalTinyJSON(in)
			}
		case "ListValue":
			if in.IsNull() {
				in.Skip()
				out.ListValue = nil
			} else {
				if out.ListValue == nil {
					out.ListValue = new(ListValue)
				}
				(*out.ListValue).UnmarshalTinyJSON(in)
			}
		case "ObjectValue":
			if in.IsNull() {
				in.Skip()
				out.ObjectValue = nil
			} else {
				if out.ObjectValue == nil {
					out.ObjectValue = new(ObjectValue)
				}
				(*out.ObjectValue).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel(out *jwriter.Writer, in Value) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bool != nil {
		const prefix string = ",\"bool\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.Bool))
	}
	if in.String != nil {
		const prefix string = ",\"string\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.String))
	}
	if in.I64 != nil {
		const prefix string = ",\"i64\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.I64))
	}
	if in.F64 != nil {
		const prefix string = ",\"f64\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.F64))
	}
	if in.Reference != nil {
		const prefix string = ",\"Reference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Reference).MarshalTinyJSON(out)
	}
	if in.ListValue != nil {
		const prefix string = ",\"ListValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ListValue).MarshalTinyJSON(out)
	}
	if in.ObjectValue != nil {
		const prefix string = ",\"ObjectValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ObjectValue).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Value) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Value) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Value) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Value) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel1(in *jlexer.Lexer, out *UnionMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Annotation
					(v1).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel1(out *jwriter.Writer, in UnionMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != nil {
		const prefix string = ",\"description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Type).MarshalTinyJSON(out)
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Annotations {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnionMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UnionMember) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnionMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UnionMember) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel1(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel2(in *jlexer.Lexer, out *Union) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]UnionMember, 0, 0)
					} else {
						out.Members = []UnionMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UnionMember
					(v4).UnmarshalTinyJSON(in)
					out.Members = append(out.Members, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Annotation
					(v5).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel2(out *jwriter.Writer, in Union) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Members {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Annotations {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Union) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Union) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Union) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Union) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel2(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel3(in *jlexer.Lexer, out *TypeRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scalar":
			if in.IsNull() {
				in.Skip()
				out.Scalar = nil
			} else {
				if out.Scalar == nil {
					out.Scalar = new(Scalar)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Scalar).UnmarshalJSON(data))
				}
			}
		case "Named":
			if in.IsNull() {
				in.Skip()
				out.Named = nil
			} else {
				if out.Named == nil {
					out.Named = new(Named)
				}
				(*out.Named).UnmarshalTinyJSON(in)
			}
		case "List":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				if out.List == nil {
					out.List = new(List)
				}
				(*out.List).UnmarshalTinyJSON(in)
			}
		case "Map":
			if in.IsNull() {
				in.Skip()
				out.Map = nil
			} else {
				if out.Map == nil {
					out.Map = new(Map)
				}
				(*out.Map).UnmarshalTinyJSON(in)
			}
		case "Stream":
			if in.IsNull() {
				in.Skip()
				out.Stream = nil
			} else {
				if out.Stream == nil {
					out.Stream = new(Stream)
				}
				(*out.Stream).UnmarshalTinyJSON(in)
			}
		case "Optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(Optional)
				}
				(*out.Optional).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel3(out *jwriter.Writer, in TypeRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Scalar != nil {
		const prefix string = ",\"Scalar\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Scalar).MarshalJSON())
	}
	if in.Named != nil {
		const prefix string = ",\"Named\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Named).MarshalTinyJSON(out)
	}
	if in.List != nil {
		const prefix string = ",\"List\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.List).MarshalTinyJSON(out)
	}
	if in.Map != nil {
		const prefix string = ",\"Map\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Map).MarshalTinyJSON(out)
	}
	if in.Stream != nil {
		const prefix string = ",\"Stream\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Stream).MarshalTinyJSON(out)
	}
	if in.Optional != nil {
		const prefix string = ",\"Optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Optional).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TypeRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v TypeRef) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TypeRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *TypeRef) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel3(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel4(in *jlexer.Lexer, out *Type) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]Field, 0, 0)
					} else {
						out.Fields = []Field{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Field
					(v10).UnmarshalTinyJSON(in)
					out.Fields = append(out.Fields, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Annotation
					(v11).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel4(out *jwriter.Writer, in Type) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Fields {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Annotations {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Type) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Type) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Type) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Type) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel4(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel5(in *jlexer.Lexer, out *Stream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel5(out *jwriter.Writer, in Stream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Stream) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Stream) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel5(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel6(in *jlexer.Lexer, out *Reference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel6(out *jwriter.Writer, in Reference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Reference) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Reference) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel6(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel7(in *jlexer.Lexer, out *ParserResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			if in.IsNull() {
				in.Skip()
				out.Namespace = nil
			} else {
				if out.Namespace == nil {
					out.Namespace = new(Namespace)
				}
				(*out.Namespace).UnmarshalTinyJSON(in)
			}
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]Error, 0, 1)
					} else {
						out.Errors = []Error{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Error
					(v16).UnmarshalTinyJSON(in)
					out.Errors = append(out.Errors, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel7(out *jwriter.Writer, in ParserResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Namespace != nil {
		const prefix string = ",\"namespace\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Namespace).MarshalTinyJSON(out)
	}
	if len(in.Errors) != 0 {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Errors {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParserResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ParserResult) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParserResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ParserResult) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel7(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel8(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		case "defaultValue":
			if in.IsNull() {
				in.Skip()
				out.DefaultValue = nil
			} else {
				if out.DefaultValue == nil {
					out.DefaultValue = new(Value)
				}
				(*out.DefaultValue).UnmarshalTinyJSON(in)
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Annotation
					(v19).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel8(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalTinyJSON(out)
	}
	if in.DefaultValue != nil {
		const prefix string = ",\"defaultValue\":"
		out.RawString(prefix)
		(*in.DefaultValue).MarshalTinyJSON(out)
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Annotations {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Parameter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Parameter) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Parameter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Parameter) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel8(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel9(in *jlexer.Lexer, out *Optional) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel9(out *jwriter.Writer, in Optional) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Optional) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Optional) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Optional) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Optional) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel9(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel10(in *jlexer.Lexer, out *Operation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 0)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Parameter
					(v22).UnmarshalTinyJSON(in)
					out.Parameters = append(out.Parameters, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unary":
			if in.IsNull() {
				in.Skip()
				out.Unary = nil
			} else {
				if out.Unary == nil {
					out.Unary = new(Parameter)
				}
				(*out.Unary).UnmarshalTinyJSON(in)
			}
		case "returns":
			if in.IsNull() {
				in.Skip()
				out.Returns = nil
			} else {
				if out.Returns == nil {
					out.Returns = new(TypeRef)
				}
				(*out.Returns).UnmarshalTinyJSON(in)
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Annotation
					(v23).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel10(out *jwriter.Writer, in Operation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v24, v25 := range in.Parameters {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Unary != nil {
		const prefix string = ",\"unary\":"
		out.RawString(prefix)
		(*in.Unary).MarshalTinyJSON(out)
	}
	if in.Returns != nil {
		const prefix string = ",\"returns\":"
		out.RawString(prefix)
		(*in.Returns).MarshalTinyJSON(out)
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Annotations {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Operation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Operation) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Operation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Operation) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel10(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel11(in *jlexer.Lexer, out *ObjectValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]ObjectField, 0, 0)
					} else {
						out.Fields = []ObjectField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v28 ObjectField
					(v28).UnmarshalTinyJSON(in)
					out.Fields = append(out.Fields, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel11(out *jwriter.Writer, in ObjectValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix[1:])
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Fields {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ObjectValue) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel11(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ObjectValue) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel11(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel12(in *jlexer.Lexer, out *ObjectField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			(out.Value).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel12(out *jwriter.Writer, in ObjectField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		(in.Value).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ObjectField) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel12(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ObjectField) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel12(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel13(in *jlexer.Lexer, out *Namespace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Annotation
					(v31).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "imports":
			if in.IsNull() {
				in.Skip()
				out.Imports = nil
			} else {
				in.Delim('[')
				if out.Imports == nil {
					if !in.IsDelim(']') {
						out.Imports = make([]Import, 0, 0)
					} else {
						out.Imports = []Import{}
					}
				} else {
					out.Imports = (out.Imports)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Import
					(v32).UnmarshalTinyJSON(in)
					out.Imports = append(out.Imports, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "directives":
			if in.IsNull() {
				in.Skip()
				out.Directives = nil
			} else {
				in.Delim('[')
				if out.Directives == nil {
					if !in.IsDelim(']') {
						out.Directives = make([]Directive, 0, 0)
					} else {
						out.Directives = []Directive{}
					}
				} else {
					out.Directives = (out.Directives)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Directive
					(v33).UnmarshalTinyJSON(in)
					out.Directives = append(out.Directives, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]Alias, 0, 0)
					} else {
						out.Aliases = []Alias{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Alias
					(v34).UnmarshalTinyJSON(in)
					out.Aliases = append(out.Aliases, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "functions":
			if in.IsNull() {
				in.Skip()
				out.Functions = nil
			} else {
				in.Delim('[')
				if out.Functions == nil {
					if !in.IsDelim(']') {
						out.Functions = make([]Operation, 0, 0)
					} else {
						out.Functions = []Operation{}
					}
				} else {
					out.Functions = (out.Functions)[:0]
				}
				for !in.IsDelim(']') {
					var v35 Operation
					(v35).UnmarshalTinyJSON(in)
					out.Functions = append(out.Functions, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "interfaces":
			if in.IsNull() {
				in.Skip()
				out.Interfaces = nil
			} else {
				in.Delim('[')
				if out.Interfaces == nil {
					if !in.IsDelim(']') {
						out.Interfaces = make([]Interface, 0, 0)
					} else {
						out.Interfaces = []Interface{}
					}
				} else {
					out.Interfaces = (out.Interfaces)[:0]
				}
				for !in.IsDelim(']') {
					var v36 Interface
					(v36).UnmarshalTinyJSON(in)
					out.Interfaces = append(out.Interfaces, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "types":
			if in.IsNull() {
				in.Skip()
				out.Types = nil
			} else {
				in.Delim('[')
				if out.Types == nil {
					if !in.IsDelim(']') {
						out.Types = make([]Type, 0, 0)
					} else {
						out.Types = []Type{}
					}
				} else {
					out.Types = (out.Types)[:0]
				}
				for !in.IsDelim(']') {
					var v37 Type
					(v37).UnmarshalTinyJSON(in)
					out.Types = append(out.Types, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unions":
			if in.IsNull() {
				in.Skip()
				out.Unions = nil
			} else {
				in.Delim('[')
				if out.Unions == nil {
					if !in.IsDelim(']') {
						out.Unions = make([]Union, 0, 0)
					} else {
						out.Unions = []Union{}
					}
				} else {
					out.Unions = (out.Unions)[:0]
				}
				for !in.IsDelim(']') {
					var v38 Union
					(v38).UnmarshalTinyJSON(in)
					out.Unions = append(out.Unions, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel13(out *jwriter.Writer, in Namespace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v39, v40 := range in.Annotations {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Imports) != 0 {
		const prefix string = ",\"imports\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v41, v42 := range in.Imports {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Directives) != 0 {
		const prefix string = ",\"directives\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v43, v44 := range in.Directives {
				if v43 > 0 {
					out.RawByte(',')
				}
				(v44).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v45, v46 := range in.Aliases {
				if v45 > 0 {
					out.RawByte(',')
				}
				(v46).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Functions) != 0 {
		const prefix string = ",\"functions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v47, v48 := range in.Functions {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Interfaces) != 0 {
		const prefix string = ",\"interfaces\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v49, v50 := range in.Interfaces {
				if v49 > 0 {
					out.RawByte(',')
				}
				(v50).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Types) != 0 {
		const prefix string = ",\"types\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v51, v52 := range in.Types {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Unions) != 0 {
		const prefix string = ",\"unions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v53, v54 := range in.Unions {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Namespace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Namespace) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Namespace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel13(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Namespace) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel13(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel14(in *jlexer.Lexer, out *Named) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Kind).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel14(out *jwriter.Writer, in Named) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.Raw((in.Kind).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Named) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Named) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Named) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel14(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Named) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel14(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel15(in *jlexer.Lexer, out *Map) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyType":
			(out.KeyType).UnmarshalTinyJSON(in)
		case "valueType":
			(out.ValueType).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel15(out *jwriter.Writer, in Map) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keyType\":"
		out.RawString(prefix[1:])
		(in.KeyType).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"valueType\":"
		out.RawString(prefix)
		(in.ValueType).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Map) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Map) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Map) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel15(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Map) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel15(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel16(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "line":
			out.Line = uint32(in.Uint32())
		case "column":
			out.Column = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel16(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Line))
	}
	{
		const prefix string = ",\"column\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Column))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Location) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel16(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Location) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel16(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel17(in *jlexer.Lexer, out *ListValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]Value, 0, 1)
					} else {
						out.Values = []Value{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v55 Value
					(v55).UnmarshalTinyJSON(in)
					out.Values = append(out.Values, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel17(out *jwriter.Writer, in ListValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Values {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ListValue) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel17(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ListValue) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel17(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel18(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel18(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v List) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v List) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *List) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel18(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *List) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel18(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel19(in *jlexer.Lexer, out *Interface) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]Operation, 0, 0)
					} else {
						out.Operations = []Operation{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v58 Operation
					(v58).UnmarshalTinyJSON(in)
					out.Operations = append(out.Operations, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v59 Annotation
					(v59).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel19(out *jwriter.Writer, in Interface) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"operations\":"
		out.RawString(prefix)
		if in.Operations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Operations {
				if v60 > 0 {
					out.RawByte(',')
				}
				(v61).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v62, v63 := range in.Annotations {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Interface) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Interface) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Interface) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel19(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Interface) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel19(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel20(in *jlexer.Lexer, out *ImportRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "as":
			if in.IsNull() {
				in.Skip()
				out.As = nil
			} else {
				if out.As == nil {
					out.As = new(string)
				}
				*out.As = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel20(out *jwriter.Writer, in ImportRef) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.As != nil {
		const prefix string = ",\"as\":"
		out.RawString(prefix)
		out.String(string(*in.As))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImportRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ImportRef) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImportRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel20(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ImportRef) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel20(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel21(in *jlexer.Lexer, out *Import) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "all":
			out.All = bool(in.Bool())
		case "names":
			if in.IsNull() {
				in.Skip()
				out.Names = nil
			} else {
				in.Delim('[')
				if out.Names == nil {
					if !in.IsDelim(']') {
						out.Names = make([]ImportRef, 0, 2)
					} else {
						out.Names = []ImportRef{}
					}
				} else {
					out.Names = (out.Names)[:0]
				}
				for !in.IsDelim(']') {
					var v64 ImportRef
					(v64).UnmarshalTinyJSON(in)
					out.Names = append(out.Names, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from":
			out.From = string(in.String())
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v65 Annotation
					(v65).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel21(out *jwriter.Writer, in Import) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != nil {
		const prefix string = ",\"description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"all\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.All))
	}
	if len(in.Names) != 0 {
		const prefix string = ",\"names\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v66, v67 := range in.Names {
				if v66 > 0 {
					out.RawByte(',')
				}
				(v67).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v68, v69 := range in.Annotations {
				if v68 > 0 {
					out.RawByte(',')
				}
				(v69).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Import) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Import) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Import) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel21(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Import) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel21(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel22(in *jlexer.Lexer, out *Field) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		case "defaultValue":
			if in.IsNull() {
				in.Skip()
				out.DefaultValue = nil
			} else {
				if out.DefaultValue == nil {
					out.DefaultValue = new(Value)
				}
				(*out.DefaultValue).UnmarshalTinyJSON(in)
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v70 Annotation
					(v70).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel22(out *jwriter.Writer, in Field) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalTinyJSON(out)
	}
	if in.DefaultValue != nil {
		const prefix string = ",\"defaultValue\":"
		out.RawString(prefix)
		(*in.DefaultValue).MarshalTinyJSON(out)
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v71, v72 := range in.Annotations {
				if v71 > 0 {
					out.RawByte(',')
				}
				(v72).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Field) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Field) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Field) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel22(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Field) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel22(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel23(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]uint32, 0, 16)
					} else {
						out.Positions = []uint32{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v73 uint32
					v73 = uint32(in.Uint32())
					out.Positions = append(out.Positions, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "locations":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if out.Locations == nil {
					if !in.IsDelim(']') {
						out.Locations = make([]Location, 0, 8)
					} else {
						out.Locations = []Location{}
					}
				} else {
					out.Locations = (out.Locations)[:0]
				}
				for !in.IsDelim(']') {
					var v74 Location
					(v74).UnmarshalTinyJSON(in)
					out.Locations = append(out.Locations, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel23(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"positions\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.Positions {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v76))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"locations\":"
		out.RawString(prefix)
		if in.Locations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Locations {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Error) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel23(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Error) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel23(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel24(in *jlexer.Lexer, out *EnumValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "index":
			out.Index = uint64(in.Uint64())
		case "display":
			if in.IsNull() {
				in.Skip()
				out.Display = nil
			} else {
				if out.Display == nil {
					out.Display = new(string)
				}
				*out.Display = string(in.String())
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v79 Annotation
					(v79).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel24(out *jwriter.Writer, in EnumValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Index))
	}
	if in.Display != nil {
		const prefix string = ",\"display\":"
		out.RawString(prefix)
		out.String(string(*in.Display))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v80, v81 := range in.Annotations {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnumValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v EnumValue) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnumValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel24(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *EnumValue) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel24(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel25(in *jlexer.Lexer, out *Enum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]EnumValue, 0, 1)
					} else {
						out.Values = []EnumValue{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v82 EnumValue
					(v82).UnmarshalTinyJSON(in)
					out.Values = append(out.Values, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v83 Annotation
					(v83).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel25(out *jwriter.Writer, in Enum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Values {
				if v84 > 0 {
					out.RawByte(',')
				}
				(v85).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v86, v87 := range in.Annotations {
				if v86 > 0 {
					out.RawByte(',')
				}
				(v87).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Enum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Enum) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Enum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel25(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Enum) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel25(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel26(in *jlexer.Lexer, out *DirectiveRequire) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "directive":
			out.Directive = string(in.String())
		case "locations":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if out.Locations == nil {
					if !in.IsDelim(']') {
						out.Locations = make([]DirectiveLocation, 0, 16)
					} else {
						out.Locations = []DirectiveLocation{}
					}
				} else {
					out.Locations = (out.Locations)[:0]
				}
				for !in.IsDelim(']') {
					var v88 DirectiveLocation
					if data := in.Raw(); in.Ok() {
						in.AddError((v88).UnmarshalJSON(data))
					}
					out.Locations = append(out.Locations, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel26(out *jwriter.Writer, in DirectiveRequire) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"directive\":"
		out.RawString(prefix[1:])
		out.String(string(in.Directive))
	}
	{
		const prefix string = ",\"locations\":"
		out.RawString(prefix)
		if in.Locations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Locations {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.Raw((v90).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DirectiveRequire) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v DirectiveRequire) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DirectiveRequire) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel26(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *DirectiveRequire) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel26(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel27(in *jlexer.Lexer, out *Directive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 0)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v91 Parameter
					(v91).UnmarshalTinyJSON(in)
					out.Parameters = append(out.Parameters, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "locations":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if out.Locations == nil {
					if !in.IsDelim(']') {
						out.Locations = make([]DirectiveLocation, 0, 16)
					} else {
						out.Locations = []DirectiveLocation{}
					}
				} else {
					out.Locations = (out.Locations)[:0]
				}
				for !in.IsDelim(']') {
					var v92 DirectiveLocation
					if data := in.Raw(); in.Ok() {
						in.AddError((v92).UnmarshalJSON(data))
					}
					out.Locations = append(out.Locations, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "require":
			if in.IsNull() {
				in.Skip()
				out.Require = nil
			} else {
				in.Delim('[')
				if out.Require == nil {
					if !in.IsDelim(']') {
						out.Require = make([]DirectiveRequire, 0, 1)
					} else {
						out.Require = []DirectiveRequire{}
					}
				} else {
					out.Require = (out.Require)[:0]
				}
				for !in.IsDelim(']') {
					var v93 DirectiveRequire
					(v93).UnmarshalTinyJSON(in)
					out.Require = append(out.Require, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel27(out *jwriter.Writer, in Directive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v94, v95 := range in.Parameters {
				if v94 > 0 {
					out.RawByte(',')
				}
				(v95).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"locations\":"
		out.RawString(prefix)
		if in.Locations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.Locations {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.Raw((v97).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"require\":"
		out.RawString(prefix)
		if in.Require == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.Require {
				if v98 > 0 {
					out.RawByte(',')
				}
				(v99).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Directive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Directive) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Directive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel27(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Directive) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel27(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel28(in *jlexer.Lexer, out *Argument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			(out.Value).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel28(out *jwriter.Writer, in Argument) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		(in.Value).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Argument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Argument) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Argument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel28(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Argument) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel28(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel29(in *jlexer.Lexer, out *Annotation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "arguments":
			if in.IsNull() {
				in.Skip()
				out.Arguments = nil
			} else {
				in.Delim('[')
				if out.Arguments == nil {
					if !in.IsDelim(']') {
						out.Arguments = make([]Argument, 0, 0)
					} else {
						out.Arguments = []Argument{}
					}
				} else {
					out.Arguments = (out.Arguments)[:0]
				}
				for !in.IsDelim(']') {
					var v100 Argument
					(v100).UnmarshalTinyJSON(in)
					out.Arguments = append(out.Arguments, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel29(out *jwriter.Writer, in Annotation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Arguments) != 0 {
		const prefix string = ",\"arguments\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v101, v102 := range in.Arguments {
				if v101 > 0 {
					out.RawByte(',')
				}
				(v102).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Annotation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Annotation) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Annotation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel29(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Annotation) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel29(l, v)
}
func tinyjson85aaecc5DecodeGithubComApexlangApexGoModel30(in *jlexer.Lexer, out *Alias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			(out.Type).UnmarshalTinyJSON(in)
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]Annotation, 0, 1)
					} else {
						out.Annotations = []Annotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v103 Annotation
					(v103).UnmarshalTinyJSON(in)
					out.Annotations = append(out.Annotations, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson85aaecc5EncodeGithubComApexlangApexGoModel30(out *jwriter.Writer, in Alias) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalTinyJSON(out)
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v104, v105 := range in.Annotations {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Alias) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Alias) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson85aaecc5EncodeGithubComApexlangApexGoModel30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Alias) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel30(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Alias) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson85aaecc5DecodeGithubComApexlangApexGoModel30(l, v)
}
